#!/bin/bash
set -e
# color codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"

# log file
DOTFILES_LOG="$HOME/.dotcube.log"

# _header colorize the given argument with spacing
function _task {
    # if _task is called while a task was set, complete the previous
    if [[ $TASK != "" ]]; then
        printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    fi
    # set new task title and print
    TASK=$1
    printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# _cmd performs commands with error checking
function _cmd {
    #create log if it doesn't exist
    if ! [[ -f $DOTFILES_LOG ]]; then
        touch "$DOTFILES_LOG"
    fi
    # > "$DOTFILES_LOG"
    # hide stdout, on error we print and exit
    if eval "$1" 1> /dev/null 2> "$DOTFILES_LOG"; then
        return 0 # success
    fi
    # read error from log and add spacing
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    while read line; do
        printf "      ${line}\n"
    done < "$DOTFILES_LOG"
    printf "\n"
    # remove log file
    # rm "$DOTFILES_LOG"
    # exit installation
    exit 1
}

function _clear_task {
    TASK=""
}

function _task_done {
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    _clear_task
}


set -e

# Paths
DOTFILES_HOME="$HOME/.dotcube"
VAULT_SECRET="$HOME/.ansible-vault/vault.secret"
SSH_FOLDER="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotcube.run"

# Script start
echo -e "${CYAN}dotcube: Bootstrap started${NC}"

# Install Ansible
# check lsb_release -si
if ! command -v ansible >/dev/null 2>&1; then
    _task "Installing Ansible"
    case "$(uname -s)" in
    Darwin)
        brew install ansible
        ;;
    Linux)
        _cmd "sudo apt update"
        _cmd "sudo apt install -y software-properties-common"
        _cmd "sudo apt-add-repository -y --update ppa:ansible/ansible"
        _cmd "sudo apt update"
        _cmd "sudo apt install -y ansible"
        _cmd "sudo apt install python3-argcomplete"
        _cmd "sudo activate-global-python-argcomplete3"
        ;;
    esac
fi

# Install git
if ! command -v git >/dev/null 2>&1; then
    _task "Installing Git"
    case "$(uname -s)" in
    Darwin)
        brew install git
        ;;
    Linux)
        # _cmd "sudo apt update"
        _cmd "sudo apt install -y git"
        ;;
    esac
fi


# Install python3 and pip
if ! command -v python3 >/dev/null 2>&1; then
    _task "Installing Python3 and pip3"
    case "$(uname -s)" in
    Darwin)
        brew install python3
        ;;
    Linux)
        _cmd "sudo apt update"
        _cmd "sudo apt install -y python3 python3-pip"
        ;;
    esac
fi

# Install pip3 if missing
if ! command -v pip3 >/dev/null 2>&1; then
    _task "Installing pip3"
    case "$(uname -s)" in
    Linux)
        _cmd "sudo apt install -y python3-pip"
        ;;
    esac
fi

# Install pip module watchdog
if ! pip3 list | grep watchdog >/dev/null 2>&1; then
    _task "Installing Python3 Watchdog"
        _cmd "pip3 install watchdog"
fi

# Creating SSH folder
if ! [[ -d "$SSH_FOLDER" ]]; then
    _task "Creating SSH folder"
        _cmd "mkdir -p $SSH_FOLDER"
        _cmd "chmod 700 $SSH_FOLDER"
fi
# Generate SSH key if it doesn't exist
if ! [[ -f "$SSH_FOLDER/id_ed25519" ]]; then
    _task "Generating SSH keys"
        _cmd "ssh-keygen -b 4096 -t ed25519 -f $SSH_FOLDER/id_ed25519 -N '' -C $USER@$HOST"
fi

# Add SSH key to authorized_keys
if ! [[ -f "$SSH_FOLDER/authorized_keys" ]]; then
    _task "Adding SSH key to authorized_keys"
        _cmd "cat $SSH_FOLDER/id_ed25519.pub >> $SSH_FOLDER/authorized_keys"
fi

# Clone repository
if ! [[ -d "$DOTFILES_HOME" ]]; then
    _task "Cloning repository"
        _cmd "git clone --quiet https://github.com/onexodus/dotcube.git $DOTFILES_HOME"
else
    _task "Updating repository"
        _cmd "git -C $DOTFILES_HOME pull --quiet"
fi

pushd "$DOTFILES_HOME/ansible" > /dev/null 2>&1 # change to dotfiles directory

_task "Updating Ansible Galaxy"
    _cmd "ansible-galaxy install -r requirements.yml"

_task "Running playbook"; _task_done


# Run playbook
if [[ -f $VAULT_SECRET ]]; then
    if [[ -n "$DOTCUBE_REMOTE_TRIGGER" ]]; then
        ansible-playbook --vault-password-file "$VAULT_SECRET" "$DOTFILES_HOME/ansible/remote.yml" "$@"
    else
        ansible-playbook --vault-password-file "$VAULT_SECRET" "$DOTFILES_HOME/ansible/main.yml" "$@"
    fi
else
    if [[ -n "$DOTCUBE_REMOTE_TRIGGER" ]]; then
        ansible-playbook "$DOTFILES_HOME/ansible/remote.yml" "$@"
    else
        ansible-playbook "$DOTFILES_HOME/ansible/main.yml" "$@"
    fi
fi

popd > /dev/null 2>&1 # return to previous directory

if [[ -z "$DOTCUBE_REMOTE_TRIGGER" ]]; then
    if ! [[ -f "$IS_FIRST_RUN" ]]; then
        echo -e ""
        echo -e "${CHECK_MARK} ${CYAN}Initial provisioning - dotcube: Bootstrap complete!${NC}"
        echo -e "${ARROW} ${CYAN}Please reload the terminal to complete the setup.${NC}"
        touch "$IS_FIRST_RUN"
    else
        echo -e ""
        echo -e "${CHECK_MARK} ${CYAN}dotcube: Bootstrap complete!${NC}"
    fi
fi

if [[ -z "$DOTCUBE_REMOTE_TRIGGER" ]]; then
    if [[ " $@ " =~ " -t " ]]; then
        tag_used=$(echo "$@" | sed -n -e 's/^.*-t \([^ ]*\).*$/\1/p')
        case "$tag_used" in
            rollback)
                echo -e ""
                echo -e "${CHECK_MARK} ${CYAN}dotcube: Rollback complete!${NC}"
                ;;
            remove)
                echo -e ""
                echo -e "${CHECK_MARK} ${CYAN}dotcube: Remove complete!${NC}"
                ;;
            *)
                if ! [[ -f "$IS_FIRST_RUN" ]]; then
                    echo -e ""
                    echo -e "${CHECK_MARK} ${CYAN}Initial provisioning - dotcube: Bootstrap complete!${NC}"
                    touch "$IS_FIRST_RUN"
                else
                    echo -e ""
                    echo -e "${CHECK_MARK} ${CYAN}dotcube: Bootstrap complete!${NC}"
                fi
                ;;
        esac
    fi
fi
# End of script
